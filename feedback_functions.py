import pandas as pd
import numpy as np
import scipy.stats as st
from scipy.integrate import solve_ivp
import tellurium as te

###########################################
## Functions for negative feedback case. ##
###########################################

# Returns the lognormal approximation of the non-linear portion of the system.
def lognormal_closure_nfb(u, k_mean, k_std):
    return np.array([0,0,0,0,0,
                     -0.02*(u[7]*u[5]*u[7])/(u[2]*u[0]*u[0]),
                     +1*(u[14]*u[5]*u[14])/(k_mean[0]*u[0]*u[0])+-0.01*(u[6]*u[19]*u[7])/(u[0]*u[1]*u[2]),
                     +-0.01*(u[7]*u[28]*u[7])/(u[0]*u[2]*u[2])+-0.01*(u[7]*u[5]*u[7])/(u[2]*u[0]*u[0])+1*(u[6]*u[25]*u[15])/(u[0]*u[1]*k_mean[1]),
                     +0.01*(u[7]*u[5]*u[7])/(u[2]*u[0]*u[0])+-0.01*(u[8]*u[29]*u[7])/(u[0]*u[3]*u[2]),
                     -0.01*(u[7]*u[30]*u[9])/(u[0]*u[2]*u[4]),
                     +-0.01*(u[10]*u[12]*u[7])/(u[0]*u[0]*u[2])+-0.01*(u[10]*u[7]*u[12])/(u[0]*u[0]*u[2]),
                     +1*(u[10]*u[14]*u[16])/(u[0]*u[0]*k_mean[0])+-0.01*(u[11]*u[23]*u[7])/(u[0]*u[1]*u[2]),
                     +1*(u[11]*u[25]*u[17])/(u[0]*u[1]*k_mean[1])+-0.01*(u[10]*u[7]*u[12])/(u[0]*u[0]*u[2])+-0.01*(u[7]*u[31]*u[12])/(u[0]*u[2]*u[2]),
                     +0.01*(u[10]*u[7]*u[12])/(u[0]*u[0]*u[2])+-0.01*(u[13]*u[39]*u[7])/(u[0]*u[3]*u[2]),
                     -0.01*(u[7]*u[32]*u[14])/(u[0]*u[2]*k_mean[0]),
                     -0.01*(u[7]*u[33]*u[15])/(u[0]*u[2]*k_mean[1]),
                     -0.01*(u[7]*u[34]*u[16])/(u[0]*u[2]*k_mean[0]),
                     -0.01*(u[7]*u[35]*u[17])/(u[0]*u[2]*k_mean[1]),
                     2*(u[6]*u[24]*u[14])/(u[0]*u[1]*k_mean[0]),
                     +1*(u[25]*u[18]*u[25])/(k_mean[1]*u[1]*u[1])+1*(u[7]*u[32]*u[14])/(u[0]*u[2]*k_mean[0])+-0.01*(u[6]*u[19]*u[7])/(u[0]*u[1]*u[2]),
                     +1*(u[8]*u[41]*u[14])/(u[0]*u[3]*k_mean[0])+0.01*(u[6]*u[19]*u[7])/(u[0]*u[1]*u[2]),
                     1*(u[9]*u[46]*u[14])/(u[0]*u[4]*k_mean[0]),
                     +1*(u[11]*u[26]*u[14])/(u[0]*u[1]*k_mean[0])+1*(u[11]*u[26]*u[14])/(u[0]*u[1]*k_mean[0]),
                     +1*(u[12]*u[34]*u[14])/(u[0]*u[2]*k_mean[0])+1*(u[22]*u[25]*u[27])/(u[1]*u[1]*k_mean[1])+-0.01*(u[11]*u[23]*u[7])/(u[0]*u[1]*u[2]),
                     1*(u[14]*(k_mean[0]**2+k_std[0]**2)*u[14])/(u[0]*k_mean[0]*k_mean[0]),
                     1*(u[14]*(k_mean[0]*k_mean[1])*u[15])/(u[0]*k_mean[0]*k_mean[1]),
                     1*(u[14]*(k_mean[0]*k_mean[0])*u[16])/(u[0]*k_mean[0]*k_mean[0]),
                     1*(u[14]*(k_mean[0]*k_mean[1])*u[17])/(u[0]*k_mean[0]*k_mean[1]),
                     +-0.02*(u[7]*u[28]*u[7])/(u[0]*u[2]*u[2])+2*(u[19]*u[33]*u[25])/(u[1]*u[2]*k_mean[1]),
                     +0.01*(u[7]*u[28]*u[7])/(u[0]*u[2]*u[2])+1*(u[20]*u[25]*u[42])/(u[3]*u[1]*k_mean[1])+-0.01*(u[8]*u[29]*u[7])/(u[0]*u[3]*u[2]),
                     +1*(u[21]*u[47]*u[25])/(u[1]*u[4]*k_mean[1])+-0.01*(u[7]*u[30]*u[9])/(u[0]*u[2]*u[4]),
                     +1*(u[23]*u[35]*u[25])/(u[1]*u[2]*k_mean[1])+1*(u[23]*u[35]*u[25])/(u[1]*u[2]*k_mean[1])+-0.01*(u[7]*u[31]*u[12])/(u[0]*u[2]*u[2])+-0.01*(u[12]*u[31]*u[7])/(u[0]*u[2]*u[2]),
                     +1*(u[24]*(k_mean[0]*k_mean[1])*u[25])/(u[1]*k_mean[0]*k_mean[1])+-0.01*(u[7]*u[32]*u[14])/(u[0]*u[2]*k_mean[0]),
                     +1*(u[25]*(k_mean[1]**2+k_std[1]**2)*u[25])/(u[1]*k_mean[1]*k_mean[1])+-0.01*(u[7]*u[33]*u[15])/(u[0]*u[2]*k_mean[1]),
                     +1*(u[26]*(k_mean[0]*k_mean[1])*u[25])/(u[1]*k_mean[0]*k_mean[1])+-0.01*(u[7]*u[34]*u[16])/(u[0]*u[2]*k_mean[0]),
                     +1*(u[25]*(k_mean[1]*k_mean[1])*u[27])/(u[1]*k_mean[1]*k_mean[1])+-0.01*(u[7]*u[35]*u[17])/(u[0]*u[2]*k_mean[1]),
                     0.02*(u[8]*u[29]*u[7])/(u[0]*u[3]*u[2]),
                     0.01*(u[7]*u[30]*u[9])/(u[0]*u[2]*u[4]),
                     +1*(u[13]*u[43]*u[14])/(u[0]*u[3]*k_mean[0])+0.01*(u[11]*u[23]*u[7])/(u[0]*u[1]*u[2]),
                     +1*(u[38]*u[25]*u[44])/(u[3]*u[1]*k_mean[1])+0.01*(u[7]*u[31]*u[12])/(u[0]*u[2]*u[2])+-0.01*(u[13]*u[39]*u[7])/(u[0]*u[3]*u[2]),
                     +0.01*(u[13]*u[39]*u[7])/(u[0]*u[3]*u[2])+0.01*(u[13]*u[39]*u[7])/(u[0]*u[3]*u[2]),
                     0.01*(u[7]*u[32]*u[14])/(u[0]*u[2]*k_mean[0]),
                     0.01*(u[7]*u[33]*u[15])/(u[0]*u[2]*k_mean[1]),
                     0.01*(u[7]*u[34]*u[16])/(u[0]*u[2]*k_mean[0]),
                     0.01*(u[7]*u[35]*u[17])/(u[0]*u[2]*k_mean[1]),
                     0,0,0])

# Compiles the closed and approximated (non-closed) parts of the moment dynamics.
def approx_moments_nfb(u, t, A, k_mean, k_std):
    return np.dot(A, u) + lognormal_closure_nfb(u, k_mean, k_std)

# Returns the initial conditions of the system.
def initialize():
    initial = np.array([30.0,5.0,5.0,5.0,5.0,
                        925.0,150.0,150.0,150.0,150.0,
                        900.0,150.0,150.0,150.0,15.0,1.5,
                        15.0,1.5,26.0,25.0,25.0,
                        25.0,25.0,25.0,2.5,0.25,
                        2.5,0.25,26.0,25.0,25.0,
                        25.0,2.5,0.25,2.5,0.25,26.0,
                        25.0,25.0,25.0,25.0,2.5,
                        0.25,2.5,0.25,25.0,2.5,
                        0.25])
    return initial

# Returns the linear (closed) portion of the system.
def closed_moments_nfb():
    A = np.array([[0,0,0,0.01,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,-0.2,0,0.1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,-1,0.01,0.8,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,-0.01,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,8,0,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0.01,0,0,0,0.01,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,-0.2,0,0.1,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0.01,0,0,0,-0.99,0.01,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,-0.01,0,0,0,-0.01,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0.8,0,-8,0,0,7.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0.8,0,0,-1,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0],
                  [0,0.2,0,0.1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-0.4,0,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0.01,0.8,0,0,0,0,0,0,0,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-8.2,0,7.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.1,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1,0,0,0],
                  [0,0,1,0.01,0.8,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-2,0.02,1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,-0.01,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.01,0,0,0,0,0,0,0.01,0.8,0,0,0,0,0,0,0,0,0,0],
                  [0,0,-0.8,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-9,7.2,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0.8,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.6,-2,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.8,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.8],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0.8,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0.8],
                  [0,0,0,0.01,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,0,0,0,0,0,0,-8.01,0,7.2,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.21,0,0.1,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-1.01,0.01,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0],
                  [0,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,7.2,0,0,0,0,0,0,0,0,0,0,0,-8,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,7.2,0,0,0,0,0,0,0,0,0,0,0,-8]])
    return A

# Numerically solves the moment dynamics of the system.
def solve_moments_nfb():
    t_span = (0,150)
    t_steps = np.linspace(0, 150, 100)
    # D, M, P, DP, Ss
    i_mean = np.array([30, 5, 5, 5, 5]) 
    i_std = np.array([5, 1, 1, 1, 0])
    # km, kp, ka, kd, ki, dm, dp, kout, kin
    k_mean = np.array([0.5, 0.05, 0.01, 0.01, 0.1, 0.2, 0.2, 0.8, 0.8])
    k_std = np.array([0.1, 0.005, 0, 0, 0, 0, 0, 0, 0])
    A = closed_moments_nfb()
    initial = initialize()
    u = solve_ivp(lambda t,y: approx_moments_nfb(y, t, A, k_mean, k_std), t_span, initial, t_eval = t_steps, method = 'Radau')
    return u

###########################################
## Functions for positive feedback case. ##
###########################################

# Returns the lognormal approximation of the non-linear portion of the system.
def lognormal_closure_pfb(u, k_mean, k_std):
    B = np.array([0,0,0,0,0,
                  -0.02*(u[7]*u[5]*u[7])/(u[2]*u[0]*u[0]),
                  (u[14]*u[5]*u[14])/(k_mean[0]*u[0]*u[0])-0.01*(u[6]*u[19]*u[7])/(u[0]*u[1]*u[2]),
                  -0.01*(u[7]*u[28]*u[7])/(u[0]*u[2]*u[2])-0.01*(u[7]*u[5]*u[7])/(u[2]*u[0]*u[0])+1*(u[6]*u[25]*u[15])/(u[0]*u[1]*k_mean[1]),
                  0.01*(u[7]*u[5]*u[7])/(u[2]*u[0]*u[0])-0.01*(u[8]*u[29]*u[7])/(u[0]*u[3]*u[2]),
                  -0.01*(u[7]*u[30]*u[9])/(u[0]*u[2]*u[4]),
                  -0.01*(u[10]*u[12]*u[7])/(u[0]*u[0]*u[2])-0.01*(u[10]*u[7]*u[12])/(u[0]*u[0]*u[2]),
                  (u[10]*u[14]*u[16])/(u[0]*u[0]*k_mean[0])-0.01*(u[11]*u[23]*u[7])/(u[0]*u[1]*u[2]),
                  (u[11]*u[25]*u[17])/(u[0]*u[1]*k_mean[1])-0.01*(u[10]*u[7]*u[12])/(u[0]*u[0]*u[2])-0.01*(u[7]*u[31]*u[12])/(u[0]*u[2]*u[2]),
                  0.01*(u[10]*u[7]*u[12])/(u[0]*u[0]*u[2])-0.01*(u[13]*u[39]*u[7])/(u[0]*u[3]*u[2]),
                  -0.01*(u[7]*u[32]*u[14])/(u[0]*u[2]*k_mean[0]),
                  -0.01*(u[7]*u[33]*u[15])/(u[0]*u[2]*k_mean[1]),
                  -0.01*(u[7]*u[34]*u[16])/(u[0]*u[2]*k_mean[0]),
                  -0.01*(u[7]*u[35]*u[17])/(u[0]*u[2]*k_mean[1]),
                  2*(u[6]*u[24]*u[14])/(u[0]*u[1]*k_mean[0]),
                  (u[25]*u[18]*u[25])/(k_mean[1]*u[1]*u[1])+(u[7]*u[32]*u[14])/(u[0]*u[2]*k_mean[0])-0.01*(u[6]*u[19]*u[7])/(u[0]*u[1]*u[2]),
                  (u[8]*u[41]*u[14])/(u[0]*u[3]*k_mean[0])+0.01*(u[6]*u[19]*u[7])/(u[0]*u[1]*u[2]),
                  (u[9]*u[46]*u[14])/(u[0]*u[4]*k_mean[0]),
                  (u[11]*u[26]*u[14])/(u[0]*u[1]*k_mean[0])+(u[11]*u[26]*u[14])/(u[0]*u[1]*k_mean[0]),
                  (u[12]*u[34]*u[14])/(u[0]*u[2]*k_mean[0])+(u[22]*u[25]*u[27])/(u[1]*u[1]*k_mean[1])-0.01*(u[11]*u[23]*u[7])/(u[0]*u[1]*u[2]),
                  (u[14]*(k_mean[0]**2+k_std[0]**2)*u[14])/(u[0]*k_mean[0]*k_mean[0]),
                  (u[14]*(k_mean[0]*k_mean[1])*u[15])/(u[0]*k_mean[0]*k_mean[1]),
                  (u[14]*(k_mean[0]*k_mean[0])*u[16])/(u[0]*k_mean[0]*k_mean[0]),
                  (u[14]*(k_mean[0]*k_mean[1])*u[17])/(u[0]*k_mean[0]*k_mean[1]),
                  -0.02*(u[7]*u[28]*u[7])/(u[0]*u[2]*u[2])+2*(u[19]*u[33]*u[25])/(u[1]*u[2]*k_mean[1]),
                  0.01*(u[7]*u[28]*u[7])/(u[0]*u[2]*u[2])+(u[20]*u[25]*u[42])/(u[3]*u[1]*k_mean[1])-0.01*(u[8]*u[29]*u[7])/(u[0]*u[3]*u[2]),
                  (u[21]*u[47]*u[25])/(u[1]*u[4]*k_mean[1])-0.01*(u[7]*u[30]*u[9])/(u[0]*u[2]*u[4]),
                  (u[23]*u[35]*u[25])/(u[1]*u[2]*k_mean[1])+(u[23]*u[35]*u[25])/(u[1]*u[2]*k_mean[1])-0.01*(u[7]*u[31]*u[12])/(u[0]*u[2]*u[2])+-0.01*(u[12]*u[31]*u[7])/(u[0]*u[2]*u[2]),
                  (u[24]*(k_mean[0]*k_mean[1])*u[25])/(u[1]*k_mean[0]*k_mean[1])-0.01*(u[7]*u[32]*u[14])/(u[0]*u[2]*k_mean[0]),
                  (u[25]*(k_mean[1]**2+k_std[1]**2)*u[25])/(u[1]*k_mean[1]*k_mean[1])-0.01*(u[7]*u[33]*u[15])/(u[0]*u[2]*k_mean[1]),
                  (u[26]*(k_mean[0]*k_mean[1])*u[25])/(u[1]*k_mean[0]*k_mean[1])-0.01*(u[7]*u[34]*u[16])/(u[0]*u[2]*k_mean[0]),
                  (u[25]*(k_mean[1]*k_mean[1])*u[27])/(u[1]*k_mean[1]*k_mean[1])-0.01*(u[7]*u[35]*u[17])/(u[0]*u[2]*k_mean[1]),
                  0.02*(u[8]*u[29]*u[7])/(u[0]*u[3]*u[2]),
                  0.01*(u[7]*u[30]*u[9])/(u[0]*u[2]*u[4]),
                  (u[13]*u[43]*u[14])/(u[0]*u[3]*k_mean[0])+0.01*(u[11]*u[23]*u[7])/(u[0]*u[1]*u[2]),
                  (u[38]*u[25]*u[44])/(u[3]*u[1]*k_mean[1])+0.01*(u[7]*u[31]*u[12])/(u[0]*u[2]*u[2])-0.01*(u[13]*u[39]*u[7])/(u[0]*u[3]*u[2]),
                  0.01*(u[13]*u[39]*u[7])/(u[0]*u[3]*u[2])+0.01*(u[13]*u[39]*u[7])/(u[0]*u[3]*u[2]),
                  0.01*(u[7]*u[32]*u[14])/(u[0]*u[2]*k_mean[0]),
                  0.01*(u[7]*u[33]*u[15])/(u[0]*u[2]*k_mean[1]),
                  0.01*(u[7]*u[34]*u[16])/(u[0]*u[2]*k_mean[0]),
                  0.01*(u[7]*u[35]*u[17])/(u[0]*u[2]*k_mean[1]),
                  0,0,0])
    return B

# Compiles the closed and approximated (non-closed) parts of the moment dynamics.
def approx_moments_pfb(u, t, A, k_mean, k_std):
    return np.dot(A, u) + lognormal_closure_pfb(u, k_mean, k_std)

# Returns the linear (closed) portion of the system.
def closed_moments_pfb(N):
    if N == 10:
        A = np.array([[0,0,0,0.01,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,-1,0.01,0.8,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,8,0,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0.01,0,0,0,0.01,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0.01,0,0,0,-0.99,0.01,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,-0.01,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0.8,0,-8,0,0,7.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0.8,0,0,-1,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0],
                      [0,0.2,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-0.4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0.01,0.8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-8.2,0,7.2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,1,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
                      [0,0,1,0.01,0.8,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-2,0.02,1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.01,0,0,0,0,0,0,0.01,0.8,0,0,0,0,0,0,0,0,0,0],
                      [0,0,-0.8,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-9,7.2,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0.8,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.6,-2,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.8,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.8],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0.8,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0.8],
                      [0,0,0,0.01,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,0,0,0,0,0,0,-8.01,0,7.2,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.21,0,1,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-1.01,0.01,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0],
                      [0,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,7.2,0,0,0,0,0,0,0,0,0,0,0,-8,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,7.2,0,0,0,0,0,0,0,0,0,0,0,-8]])
    elif N == 100:
        A = np.array([[0,0,0,0.01,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,-1,0.01,0.8,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,80,0,-80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0.01,0,0,0,0.01,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0.01,0,0,0,-0.99,0.01,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,-0.01,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0.8,0,-80,0,0,79.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0.8,0,0,-1,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0],
                      [0,0.2,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-0.4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0.01,0.8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-80.2,0,79.2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,1,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
                      [0,0,1,0.01,0.8,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-2,0.02,1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.01,0,0,0,0,0,0,0.01,0.8,0,0,0,0,0,0,0,0,0,0],
                      [0,0,-0.8,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-81,79.2,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0.8,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.6,-2,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.8,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.8],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0.8,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0.8],
                      [0,0,0,0.01,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,0,0,0,0,0,0,-80.01,0,79.2,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.21,0,1,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-1.01,0.01,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0],
                      [0,0,80,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-160,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,79.2,0,0,0,0,0,0,0,0,0,0,0,-80,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,79.2,0,0,0,0,0,0,0,0,0,0,0,-80]])
    elif N == 1000:
        A = np.array([[0,0,0,0.01,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,-1,0.01,0.8,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,800,0,-800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0.01,0,0,0,0.01,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0.01,0,0,0,-0.99,0.01,0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,-0.01,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0.8,0,-800,0,0,799.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,-0.2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0.8,0,0,-1,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0],
                      [0,0.2,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-0.4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2,0.01,0.8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-800.2,0,799.2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-1.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,1,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
                      [0,0,1,0.01,0.8,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-2,0.02,1.6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,-0.01,0,0,0,-0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.01,0,0,0,0,0,0,0.01,0.8,0,0,0,0,0,0,0,0,0,0],
                      [0,0,-0.8,0,-0.8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-801,799.2,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0.8,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.6,-2,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.8,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.8],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0.8,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0.01,0,0,0.8],
                      [0,0,0,0.01,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,0,0,0,0,0,0,-800.01,0,799.2,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.21,0,1,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,-1.01,0.01,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.02,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.01,0,0,0],
                      [0,0,800,0,800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1600,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,799.2,0,0,0,0,0,0,0,0,0,0,0,-800,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8,0,799.2,0,0,0,0,0,0,0,0,0,0,0,-800]])
    return A

# Numerically solves the moment dynamics of the system.
def solve_moments_pfb(N):
    t_span = (0,150)
    t_steps = np.linspace(0, 150, 100)
    # D, M, P, DP, Ss
    i_mean = np.array([30, 5, 5, 5, 5]) 
    i_std = np.array([5, 1, 1, 1, 0])
    # km, kp, ka, kd, ki, dm, dp, kout, kin
    k_mean = np.array([0.5, 0.05, 0.01, 0.01, 1, 0.2, 0.2, 0.8, 0.8])
    k_std = np.array([0.1, 0.005, 0, 0, 0, 0, 0, 0, 0])
    A = closed_moments_pfb(N)
    initial = initialize()
    u = solve_ivp(lambda t,y: approx_moments_pfb(y, t, A, k_mean, k_std), t_span, initial, t_eval = t_steps, method = 'Radau')
    return u

########################
## Functions for SSA. ##
########################

# Writes the Antimony file for the feedback process.
def writeFeedback(initials, rates, N):
    ant = open('feedback.ant','w')
    ant.write("model feedback\n")
    rxn_id = 0
    for i in range(0,N):
        ant.write("R"+str(rxn_id+1)+": D"+str(i)+" -> D"+str(i)+" + M"+str(i)+"; km"+str(i)+"*D"+str(i)+" \n")
        ant.write("R"+str(rxn_id+2)+": M"+str(i)+" -> M"+str(i)+" + P"+str(i)+"; kp"+str(i)+"*M"+str(i)+" \n")
        ant.write("R"+str(rxn_id+3)+": D"+str(i)+" + P"+str(i)+" -> DP"+str(i)+"; ka"+str(i)+"*D"+str(i)+"*P"+str(i)+" \n")
        ant.write("R"+str(rxn_id+4)+": DP"+str(i)+" -> D"+str(i)+" + P"+str(i)+"; kd"+str(i)+"*DP"+str(i)+" \n")
        ant.write("R"+str(rxn_id+5)+": DP"+str(i)+" -> DP"+str(i)+" + M"+str(i)+"; ki"+str(i)+"*DP"+str(i)+" \n")
        ant.write("R"+str(rxn_id+6)+": M"+str(i)+" -> ;dm"+str(i)+"*M"+str(i)+" \n")
        ant.write("R"+str(rxn_id+7)+": P"+str(i)+" -> ; dp"+str(i)+"*P"+str(i)+" \n")
        ant.write("R"+str(rxn_id+8)+": P"+str(i)+" -> Ss; kout"+str(i)+"*P"+str(i)+" \n")
        ant.write("R"+str(rxn_id+9)+": Ss -> P"+str(i)+"; kin"+str(i)+"*Ss \n\n")
        rxn_id = rxn_id + 9

    for i in range(N):
        ant.write("km"+str(i)+" = "+str(rates[i][0])+";\n")
        ant.write("kp"+str(i)+" = "+str(rates[i][1])+";\n")
        ant.write("ka"+str(i)+" = "+str(rates[i][2])+";\n")
        ant.write("kd"+str(i)+" = "+str(rates[i][3])+";\n")
        ant.write("ki"+str(i)+" = "+str(rates[i][4])+";\n")
        ant.write("dm"+str(i)+" = "+str(rates[i][5])+";\n")
        ant.write("dp"+str(i)+" = "+str(rates[i][6])+";\n")
        ant.write("kout"+str(i)+" = "+str(rates[i][7])+";\n")
        ant.write("kin"+str(i)+" = "+str(rates[i][8])+";\n")
        ant.write("D"+str(i)+" = "+str(initials[i][0])+";\n")
        ant.write("M"+str(i)+" = "+str(initials[i][1])+";\n")
        ant.write("P"+str(i)+" = "+str(initials[i][2])+";\n")
        ant.write("DP"+str(i)+" = "+str(initials[i][3])+";\n")
        
    ant.write("Ss = "+str(initials[0][4])+";\n")
    ant.write("end")
    ant.close()
    return

# Runs multiple stochastic simulations using Tellurium.
def runSSA(N, runs, ki):
    # D, M, P, DP, Ss
    i_mean = np.array([30, 5, 5, 5, 5]) 
    i_std = np.array([5, 1, 1, 1, 0])
    i_logmean = np.nan_to_num(np.log(i_mean**2/np.sqrt(i_mean**2+i_std**2)))
    i_logsigma = np.nan_to_num(np.sqrt(np.log(1+((i_std**2)/(i_mean**2)))))
    # km, kp, ka, kd, ki, dm, dp, kout, kin
    k_mean = np.array([0.5, 0.05, 0.01, 0.01, ki, 0.2, 0.2, 0.8, 0.8])
    k_std = np.array([0.1, 0.005, 0, 0, 0, 0, 0, 0, 0])
    with np.errstate(all='ignore'): # Divide by zero errors are from homogeneous rate parameters only and not used.
        k_logmean = np.nan_to_num(np.log(k_mean**2/np.sqrt(k_mean**2+k_std**2)))
        k_logsigma = np.nan_to_num(np.sqrt(np.log(1+((k_std**2)/(k_mean**2)))))
    s_stack = np.zeros(4*N+2)
    for i in range(runs):
        initials = np.random.lognormal(i_logmean, i_logsigma, size = (N, len(i_logmean)))
        rates = np.random.lognormal(k_logmean, k_logsigma, size = (N, len(k_logmean)))
        writeFeedback(initials.astype(int), rates, N)
        path = 'feedback.ant'
        r = te.loada(path)
        r.integrator = 'gillespie'
        selections = ['time'] + r.getFloatingSpeciesIds()
        r.integrator.variable_step_size = False
        r.resetToOrigin()
        s = r.simulate(0, 150, 100, selections=selections)
        s_stack = np.vstack((s_stack, s))
    s_stack = s_stack[1:]
    s_stack_df = pd.DataFrame(s_stack, columns = s.colnames)
    s_stack_df['N'] = np.repeat(N,runs*100)
    s_stack_df['ki'] = np.repeat(ki,runs*100)
    return s_stack_df

# Bootstrapping to get confidence intervals of SSA runs.
def bootstrapping(data, typ, runs, pts, label):
    # typ bootstrap of mean, var, cv, or pv.
    # runs is for the number bootstraps.
    # pts is how many time points there are.
    # labels is the list of column names needed for the bootstrap calculation.
    raw_arr = np.array(data[label[0]]).reshape(runs,pts)
    idx = np.random.randint(runs, size = runs)
    boot_arr = raw_arr[idx,:]
    if typ == 'mean':
        boots = np.mean(boot_arr,axis = 0)
    elif typ == 'var':
        boots = np.std(boot_arr,axis = 0)**2 + np.mean(boot_arr,axis = 0)**2
    elif typ == 'cv':
        boots = np.std(boot_arr,axis = 0)/np.mean(boot_arr,axis = 0)
    elif typ == 'pv':
        d1 = np.array(data[label[1]]).reshape(runs,pts)[idx,:]
        d2 = np.array(data[label[2]]).reshape(runs,pts)[idx,:]
        boots = (np.mean(boot_arr,axis = 0)/(d1*d2))**0.5
    for i in range(runs-1):
        raw_arr = np.array(data[label[0]]).reshape(runs,pts)
        idx = np.random.randint(runs, size = runs)
        boot_arr = raw_arr[idx,:]
        if typ == 'mean':
            boots = np.vstack((boots, np.mean(boot_arr,axis = 0)))
        elif typ == 'var':
            boots = np.vstack((boots, np.std(boot_arr,axis = 0)**2 + np.mean(boot_arr,axis = 0)**2))
        elif typ == 'cv':
            boots = np.vstack((boots, np.std(boot_arr,axis = 0)/np.mean(boot_arr,axis = 0)))
        elif typ == 'pv':
            d1 = np.array(data[label[1]]).reshape(runs,pts)[idx,:]
            d2 = np.array(data[label[2]]).reshape(runs,pts)[idx,:]
            boots = np.vstack((boots, (np.mean(boot_arr,axis = 0)/(d1*d2))**0.5))
    ci = st.t.interval(0.95, len(boots), loc=np.mean(boots, axis = 0), scale=np.std(boots,axis = 0))
    ci_df = pd.DataFrame(np.array((ci[0],ci[1])).transpose())
    ci_df.columns = ['lower','upper']
    return ci_df